{"ast":null,"code":"var _jsxFileName = \"/Users/cgmello/Git/Blockchain/content-on-blockchain/react-dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { Button, Form, Container, InputGroup } from 'react-bootstrap';\nimport ContentsOnTheBlock from './artifacts/contracts/ContentsOnTheBlock.sol/ContentsOnTheBlock.json'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  _s();\n\n  // store content in local state\n  const [content, setContentValue] = useState(\"\");\n\n  const handleInput = event => {\n    setContentValue(event.target.value);\n  }; // request access to the user's MetaMask account\n\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // call the smart contract, read the current content value\n\n\n  async function fetchContent() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, provider);\n\n      try {\n        const data = await contract.getContent();\n        setContentValue(data);\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // call the smart contract, send an update\n\n\n  async function setContent() {\n    if (!content) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, signer);\n      const transaction = await contract.setContent(content);\n      await transaction.wait();\n      fetchContent();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Your content on the blockchain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Set your content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        size: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n          id: \"inputGroup-sizing-lg\",\n          children: \"Large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          \"aria-label\": \"Large\",\n          \"aria-describedby\": \"inputGroup-sizing-sm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: fetchContent,\n      variant: \"success\",\n      children: \"Get Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: setContent,\n      children: \"Set Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleInput,\n      placeholder: \"Set content\",\n      value: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SO/aIgAFis9a+Log+yinFICTEGc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cgmello/Git/Blockchain/content-on-blockchain/react-dapp/src/App.js"],"names":["useState","ethers","Button","Form","Container","InputGroup","ContentsOnTheBlock","contractAddress","App","content","setContentValue","handleInput","event","target","value","requestAccount","window","ethereum","request","method","fetchContent","provider","providers","Web3Provider","contract","Contract","abi","data","getContent","console","log","err","setContent","signer","getSigner","transaction","wait"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAO,sCAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,UAAlC,QAAoD,iBAApD;AACA,OAAOC,kBAAP,MAA+B,sEAA/B,C,CAEA;;;AACA,MAAMC,eAAe,GAAG,4CAAxB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,OAAD,EAAUC,eAAV,IAA6BV,QAAQ,CAAC,EAAD,CAA3C;;AAEA,QAAMW,WAAW,GAAIC,KAAD,IAAW;AAC7BF,IAAAA,eAAe,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD,CAJa,CAQb;;;AACA,iBAAeC,cAAf,GAAgC;AAC9B,UAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB,CAAN;AACD,GAXY,CAab;;;AACA,iBAAeC,YAAf,GAA8B;AAC5B,QAAI,OAAOJ,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMI,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,QAAX,CAAoBlB,eAApB,EAAqCD,kBAAkB,CAACoB,GAAxD,EAA6DL,QAA7D,CAAjB;;AACA,UAAI;AACF,cAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACI,UAAT,EAAnB;AACAlB,QAAAA,eAAe,CAACiB,IAAD,CAAf;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,IAAtB;AACD,OAJD,CAIE,OAAOI,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACD;AACF;AACF,GA1BY,CA4Bb;;;AACA,iBAAeC,UAAf,GAA4B;AAC1B,QAAI,CAACvB,OAAL,EAAc;;AACd,QAAI,OAAOO,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMF,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMgB,MAAM,GAAGZ,QAAQ,CAACa,SAAT,EAAf;AACA,YAAMV,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,QAAX,CAAoBlB,eAApB,EAAqCD,kBAAkB,CAACoB,GAAxD,EAA6DO,MAA7D,CAAjB;AACA,YAAME,WAAW,GAAG,MAAMX,QAAQ,CAACQ,UAAT,CAAoBvB,OAApB,CAA1B;AACA,YAAM0B,WAAW,CAACC,IAAZ,EAAN;AACAhB,MAAAA,YAAY;AACb;AACF;;AAED,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,MAAtB;AAA6B,QAAA,SAAS,EAAC,gBAAvC;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,IAAI,EAAC,MAAnB;AAA0B,UAAA,WAAW,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,UAAD;AAAY,QAAA,IAAI,EAAC,IAAjB;AAAA,gCACE,QAAC,UAAD,CAAY,IAAZ;AAAiB,UAAA,EAAE,EAAC,sBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,wBAAW,OAAxB;AAAgC,8BAAiB;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEA,YAAjB;AAA+B,MAAA,OAAO,EAAC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEY,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,eAeE;AACE,MAAA,QAAQ,EAAErB,WADZ;AAEE,MAAA,WAAW,EAAC,aAFd;AAGE,MAAA,KAAK,EAAEF;AAHT;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAjEQD,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'\nimport { Button, Form, Container, InputGroup } from 'react-bootstrap';\nimport ContentsOnTheBlock from './artifacts/contracts/ContentsOnTheBlock.sol/ContentsOnTheBlock.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n\nfunction App() {\n  // store content in local state\n  const [content, setContentValue] = useState(\"\")\n\n  const handleInput = (event) => {\n    setContentValue(event.target.value)\n  }\n\n  // request access to the user's MetaMask account\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  // call the smart contract, read the current content value\n  async function fetchContent() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, provider)\n      try {\n        const data = await contract.getContent()\n        setContentValue(data)\n        console.log('data: ', data)\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }    \n  }\n\n  // call the smart contract, send an update\n  async function setContent() {\n    if (!content) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, signer)\n      const transaction = await contract.setContent(content)\n      await transaction.wait()\n      fetchContent()\n    }\n  }\n\n  return (\n    <Container>\n      <Form>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Your content on the blockchain</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"Set your content\" />\n        </Form.Group>\n\n        <InputGroup size=\"lg\">\n          <InputGroup.Text id=\"inputGroup-sizing-lg\">Large</InputGroup.Text>\n          <FormControl aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n      </Form>\n\n      <Button onClick={fetchContent} variant=\"success\">Get Content</Button>\n      <Button onClick={setContent}>Set Content</Button>\n      <input \n        onChange={handleInput} \n        placeholder=\"Set content\" \n        value={content}\n      />\n    </Container>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}