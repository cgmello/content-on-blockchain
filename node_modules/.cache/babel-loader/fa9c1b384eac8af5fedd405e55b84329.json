{"ast":null,"code":"var _jsxFileName = \"/Users/cgmello/Git/Blockchain/content-on-blockchain/react-dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport ContentsOnTheBlock from './artifacts/contracts/ContentsOnTheBlock.sol/ContentsOnTheBlock.json'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  _s();\n\n  // store content in local state\n  const [content, setContentValue] = useState(); // request access to the user's MetaMask account\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // call the smart contract, read the current content value\n\n\n  async function fetchContent() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, provider);\n\n      try {\n        const data = await contract.getContent();\n        const elem = document.getElementById('content');\n        elem.value = data;\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // call the smart contract, send an update\n\n\n  async function setContent() {\n    if (!content) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, signer);\n      const transaction = await contract.setContent(content);\n      await transaction.wait();\n      fetchContent();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchContent,\n        children: \"Get Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setContent,\n        children: \"Set Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setContentValue(e.target.value),\n        id: \"content\",\n        placeholder: \"Set content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IrO2rovF0uV0Rwsiu9UpOzkYxM4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cgmello/Git/Blockchain/content-on-blockchain/react-dapp/src/App.js"],"names":["useState","ethers","ContentsOnTheBlock","contractAddress","App","content","setContentValue","requestAccount","window","ethereum","request","method","fetchContent","provider","providers","Web3Provider","contract","Contract","abi","data","getContent","elem","document","getElementById","value","console","log","err","setContent","signer","getSigner","transaction","wait","e","target"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,kBAAP,MAA+B,sEAA/B,C,CAEA;;;AACA,MAAMC,eAAe,GAAG,4CAAxB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,OAAD,EAAUC,eAAV,IAA6BN,QAAQ,EAA3C,CAFa,CAIb;;AACA,iBAAeO,cAAf,GAAgC;AAC9B,UAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB,CAAN;AACD,GAPY,CASb;;;AACA,iBAAeC,YAAf,GAA8B;AAC5B,QAAI,OAAOJ,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMI,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,QAAQ,GAAG,IAAIf,MAAM,CAACgB,QAAX,CAAoBd,eAApB,EAAqCD,kBAAkB,CAACgB,GAAxD,EAA6DL,QAA7D,CAAjB;;AACA,UAAI;AACF,cAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACI,UAAT,EAAnB;AACA,cAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAb;AACAF,QAAAA,IAAI,CAACG,KAAL,GAAaL,IAAb;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,IAAtB;AACD,OALD,CAKE,OAAOQ,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACD;AACF;AACF,GAvBY,CAyBb;;;AACA,iBAAeC,UAAf,GAA4B;AAC1B,QAAI,CAACvB,OAAL,EAAc;;AACd,QAAI,OAAOG,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMF,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMoB,MAAM,GAAGhB,QAAQ,CAACiB,SAAT,EAAf;AACA,YAAMd,QAAQ,GAAG,IAAIf,MAAM,CAACgB,QAAX,CAAoBd,eAApB,EAAqCD,kBAAkB,CAACgB,GAAxD,EAA6DW,MAA7D,CAAjB;AACA,YAAME,WAAW,GAAG,MAAMf,QAAQ,CAACY,UAAT,CAAoBvB,OAApB,CAA1B;AACA,YAAM0B,WAAW,CAACC,IAAZ,EAAN;AACApB,MAAAA,YAAY;AACb;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEA,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEgB,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAO,QAAA,QAAQ,EAAEK,CAAC,IAAI3B,eAAe,CAAC2B,CAAC,CAACC,MAAF,CAASV,KAAV,CAArC;AAAuD,QAAA,EAAE,EAAC,SAA1D;AAAoE,QAAA,WAAW,EAAC;AAAhF;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAhDQpB,G;;KAAAA,G;AAkDT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'\nimport ContentsOnTheBlock from './artifacts/contracts/ContentsOnTheBlock.sol/ContentsOnTheBlock.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n\nfunction App() {\n  // store content in local state\n  const [content, setContentValue] = useState()\n\n  // request access to the user's MetaMask account\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  // call the smart contract, read the current content value\n  async function fetchContent() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, provider)\n      try {\n        const data = await contract.getContent()\n        const elem = document.getElementById('content')\n        elem.value = data\n        console.log('data: ', data)\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }    \n  }\n\n  // call the smart contract, send an update\n  async function setContent() {\n    if (!content) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(contractAddress, ContentsOnTheBlock.abi, signer)\n      const transaction = await contract.setContent(content)\n      await transaction.wait()\n      fetchContent()\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={fetchContent}>Get Content</button>\n        <button onClick={setContent}>Set Content</button>\n        <input onChange={e => setContentValue(e.target.value)} id=\"content\" placeholder=\"Set content\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}